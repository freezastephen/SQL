create database mydb;
use mydb;
CREATE TABLE employees(
employee_id INT,
 first_name VARCHAR(50),
 last_name VARCHAR(50),
 hourly_pay DECIMAL(5,2),
 date_hired DATE
 );
SELECT* from employees;
RENAME TABLE WORKERS TO employees;
ALTER TABLE employees
ADD phone_number VARCHAR(15);
SELECT* FROM employees;
ALTER TABLE employees 
RENAME COLUMN phone_number TO email;
SELECT* FROM employees;
ALTER TABLE employees
MODIFY COLUMN email VARCHAR(100);
ALTER TABLE employees
MODIFY COLUMN email VARCHAR(100)
AFTER last_name;
SELECT* FROM employees;
INSERT INTO employees
 VALUES (2,"FREEZ","STEPH","FREEz@GMAIL.COM",55.9,"2023-02-14"),
 (3,"fre","rock","frezaro@gmail.com",56.70,"2012-01-09"),
 (4,"selvi","stephen","selvi@gmail.com",58.90,"2024-02-20"),
(5,"anto","in","infant@gmail.com",56.90,"2020-01-19"),
 (6,"angel","line","angeline@gmail.com",45.70,"2022-09-30");
 
 SELECT* FROM employees;
 INSERT INTO employees(employee_id,first_name,last_name,email)
 VALUES(7,"ROCK","ANTO","rockanto@gmail.com");
 SELECT* FROM employees;
 SELECT *
 FROM employees
 WHERE last_name="stephen";
 SELECT*
 FROM employees
 where hourly_pay>=56;
 SELECT* 
 FROM employees
 where hourly_pay IS  NULL;
SET SQL_SAFE_UPDATES = 0;
UPDATE employees
SET hourly_pay=70.0,
date_hired="2024-05-23"
WHERE last_name="ANTO";
SELECT*
FROM employees
where last_name="ANTO";
SET AUTOCOMMIT= OFF;
COMMIT;
DELETE FROM employees;
SELECT * FROM emlpoyees;
ROLLBACK;
SELECT * FROM employees;
CREATE TABLE PRODUCTS
(product_id INT,
product_name VARCHAR(50),
price DECIMAL(4,2));
ALTER TABLE PRODUCTS
ADD CONSTRAINT 
UNIQUE(product_name);
select* from PRODUCTS;
ALTER TABLE products DROP INDEX product_id;
SELECT* FROM PRODUCTS;
INSERT INTO PRODUCTS
VALUES
(101,"CAPPACINO",3.99),
(102,"EXPRESSO",4.39),
(103,"BLACKCOFFE",2.99),
(104,"ICE_TEA",2.00);
SELECT* FROM PRODUCTS;
INSERT INTO PRODUCTS
VALUES(105,"F_CAPACINO",3.00);
SELECT* FROM PRODUCTS;
ALTER TABLE PRODUCTS
ADD CONSTRAINT UNIQUE (product_id);
INSERT INTO PRODUCTS
VALUES(106,"BLACK_TEA",3.50);
SELECT* FROM PRODUCTS;
ALTER TABLE PRODUCTS
ADD offer_price DECIMAL(4,2);
SELECT* FROM PRODUCTS;
USE  time_test;
ALTER TABLE PRODUCTS DROP COLUMN offer_price; 
SELECT* FROM PRODUCTS;
ALTER TABLE PRODUCTS
ADD offer_price DECIMAL(4,2);
select* from employees;


SELECT* FROM PRODUCTS;
UPDATE products SET offer_price=2.99 WHERE product_id=101;
SELECT* FROM PRODUCTS;
UPDATE PRODUCTS SET offer_price=3.99 WHERE product_id=102;
UPDATE PRODUCTS SET offer_price=1.99 WHERE product_id=103;
UPDATE PRODUCTS SET offer_price=2.99 WHERE product_id=104;
UPDATE PRODUCTS SET offer_price=3.99 WHERE product_id=105;
UPDATE PRODUCTS SET offer_price=2.99 WHERE product_id=106;
SELECT* FROM PRODUCTS;
ALTER TABLE PRODUCTS 
MODIFY price DECIMAL (4,2) NOT NULL;
INSERT INTO PRODUCTS 
VALUES (107,"COOKIE", 4.99, 2.99);
SELECT* FROM PRODUCTS;
create database mydb;
USE mydb;
select* from employees;
ALTER TABLE employees 
 ADD CONSTRAINT check_hp CHECK (hourly_pay>=10);
 INSERT INTO employees
 values(8,"joy","antony","joy@gmail.com",6.00,"2014-06-4");
 INSERT INTO employees
 values(8,"joy","antony","joy@gmail.com",60.00,"2014-06-4");
 ALTER TABLE employees
 ADD CONSTRAINT chk_mail CHECK (email LIKE '%@');
 SELECT * FROM employees WHERE email NOT LIKE '%@%';
 SELECT* FROM employees;
  ALTER TABLE employees
 ADD CONSTRAINT chk1_email CHECK (email LIKE '%@%');
 ALTER TABLE employees 
 DROP CHECK chk1_email ;
 USE time_test ;
ALTER TABLE PRODUCTS
ALTER  COLUMN  price SET DEFAULT 0,
ALTER COLUMN offer_price SET DEFAULT 0;
SELECT * FROM PRODUCTS;
INSERT INTO PRODUCTS(product_id,product_name)
VALUES
(109,"free_sugar"),
(110,"hot_water");
SET AUTOCOMMIT=OFF;
select* from PRODUCTS;
SET AUTOCOMMIT=OFF;
COMMIT;
CREATE TABLE transactions (
t_id int,
t_a DECIMAL(5,2),
t_da DATETIME DEFAULT NOW());
INSERT INTO  transactions(t_id,t_a)
VALUES(1,23.99);
SELECT * FROM transactions;
ALTER TABLE transactions
ADD CONSTRAINT 
PRIMARY KEY (t_id);
INSERT INTO transactions (t_id,t_a)
VALUES(2,4.99),
(4,3.99),
(3,5.99);
SELECT* FROM transactions;
SELECT 
t_a,t_da
FROM transactions 
WHERE t_id=3;
ALTER TABLE transactions
MODIFY COLUMN  t_id INT AUTO_INCREMENT;
SELECT* FROM transactions;
INSERT INTO transactions(t_a)
VALUES(7.99),
(3.88),
(6.88),
(8.90);
SELECT* FROM transactions;
CREATE DATABASE KEY_S;
USE KEY_S;
CREATE TABLE TRANS(
T_ID INT  AUTO_INCREMENT PRIMARY KEY ,
T_V DECIMAL(5,2),
T_D DATETIME DEFAULT NOW());
ALTER TABLE TRANS
AUTO_INCREMENT=1000;
INSERT INTO TRANS (T_V)
VALUES (300.00);
SELECT* FROM TRANS;
CREATE TABLE CUSTOMERS(
C_ID INT PRIMARY KEY ,
FIRST_NAME VARCHAR(50),
LAST_NAME VARCHAR(25));
ALTER TABLE CUSTOMERS
MODIFY COLUMN C_ID INT AUTO_INCREMENT;
INSERT INTO CUSTOMERS(FIRST_NAME,LAST_NAME)
VALUES("FREEZA","STEPHEN"),
("INFANT","AMAL"),
("AROCK","ANTONY");
SELECT* FROM CUSTOMERS;
ALTER TABLE TRANS 
ADD C_ID INT ;
SELECT* FROM TRANS;
INSERT INTO TRANS (T_V,C_ID)
VALUES(250.00,01),
(340,02),
(430,03);
SELECT* FROM TRANS;
ALTER TABLE TRANS 
ADD CONSTRAINT C_ID
FOREIGN KEY(C_ID)  REFERENCES  CUSTOMERS(C_ID);
SELECT* FROM TRANS;
INSERT INTO TRANS(T_V,C_ID)
VALUES(345,3);
SELECT* FROM TRANS;
UPDATE TRANS 
SET C_ID = 3
WHERE T_ID=1000;
SELECT* FROM TRANS;
SELECT * 
FROM CUSTOMERS INNER JOIN TRANS
ON CUSTOMERS.C_ID=TRANS.C_ID;
SELECT* FROM TRANS;
UPDATE  TRANS
SET C_ID=4 WHERE T_ID=1004;
SELECT *
FROM TRANS INNER JOIN CUSTOMERS
ON TRANS.C_ID= CUSTOMERS.C_ID;
INSERT INTO TRANS(T_V,C_ID)
VALUES(345,NULL);
SELECT * FROM TRANS;
SELECT*
FROM TRANS INNER JOIN CUSTOMERS
ON TRANS.C_ID=CUSTOMERS.C_ID;
SELECT* FROM TRANS;
SELECT T_ID,FIRST_NAME,T_V FROM 
TRANS  INNER JOIN CUSTOMERS
ON TRANS.C_ID=CUSTOMERS.C_ID;
SELECT * FROM TRANS
RIGHT JOIN CUSTOMERS
ON TRANS.C_ID=CUSTOMERS.C_ID;
SELECT * FROM CUSTOMERS
RIGHT JOIN TRANS
ON CUSTOMERS.C_ID=TRANS.C_ID;
SELECT COUNT(*)
FROM TRANS;
SELECT* FROM TRANS; 
SELECT MAX(T_V)
FROM TRANS;
SELECT * FROM TRANS;
SELECT MAX(T_V)
AS MAXIMUM 
FROM TRANS;
SELECT SUM(T_V)
AS SUMM
FROM TRANS;
USE mydb;
SELECT * FROM employees;
SELECT CONCAT(first_name," ",last_name)
AS FULL_NAME
FROM employees;
ALTER TABLE employees
ADD COLUMN JOB VARCHAR(25) AFTER hourly_pay;
SET SQL_SAFE_UPDATES = 0;
SELECT * FROM employees;
UPDATE employees
SET JOB="SHOPKEEPER" WHERE employee_id=8;
select* FROM employees;
UPDATE employees
SET JOB=" MAINTAINANCE" WHERE employee_id =6;
SELECT* FROM employees;
SELECT * 
FROM employees WHERE date_hired="2024-02-20"AND JOB="CASHIER";
SELECT* FROM employees WHERE JOB="MANAGER" OR JOB="GM";
SELECT* FROM employees;
SELECT * FROM employees 
WHERE last_name like "a%";
USE TIME_TEST;
SELECT* FROM transactions; 
SELECT * FROM transactions 
ORDER BY t_a ASC;
SELECT * FROM transactions
ORDER BY t_a ,t_id;
SELECT* FROM transactions 
ORDER BY t_da,t_a ASC;
USE mydb;
USE time_test;
SELECT * FROM CUSTOMERS;
SELECT* FROM CUSTOMERS;
 USE KEY_S ;
 SELECT* FROM CUSTOMERS;
 USE mydb;
 SELECT * FROM employees;
 SELECT * FROM 
 employees
 LIMIT 4;
 USE KEY_S;
 CREATE TABLE income
 ( income_name VARCHAR(20),
 amount INT);
 INSERT INTO income(income_name,amount)
 VALUES("orders",1200000),
 ("rent",10000),
 ("online",120000);
 SELECT*FROM income;
 alter table income 
 add inc_n int ;
 ALTER TABLE income
 MODIFY COLUMN inc_n int
 first;
 SELECT* FROM income;
 ALTER TABLE income
 MODIFY COLUMN inc_n int 
 auto_increment,
 ADD PRIMARY KEY (inc_n);
 SELECT * FROM income;
 CREATE TABLE EXPENSES
 ( e_name varchar(50),
 amount int);
 INSERT INTO EXPENSES(e_name,amount)
 values("wages",12345),
 ("wages1",29354),
 ("tax",4567),
 ("repair",456578);
 ALTER TABLE EXPENSES 
 ADD 
 E_ID INT;
 ALTER TABLE EXPENSES 
 MODIFY COLUMN E_ID int
 FIRST;
 ALTER TABLE EXPENSES 
 MODIFY COLUMN E_ID INT 
 auto_increment,
 ADD PRIMARY KEY(E_ID);
 SELECT* FROM EXPENSES;
  SELECT* FROM income 
 UNION 
 SELECT * FROM EXPENSES;
 SELECT income_name, amount FROM income
 UNION 
 SELECT e_name,amount FROM EXPENSES;
SELECT* FROM CUSTOMERS;
#SELF-JOIN #
ALTER TABLE CUSTOMERS
ADD COLUMN REFER_ID INT;
SELECT * FROM CUSTOMERS;
UPDATE CUSTOMERS 
SET REFER_ID=1
WHERE C_ID=3;
SELECT* FROM CUSTOMERS;
SELECT * FROM CUSTOMERS 
AS A
INNER JOIN CUSTOMERS AS B
ON A.REFER_ID=B.C_ID;
SELECT A.C_ID,A.FIRST_NAME,A.LAST_NAME,
CONCAT (B.LAST_NAME," ",B.FIRST_NAME) AS REFERED_BY
FROM CUSTOMERS AS A
INNER JOIN CUSTOMERS AS B
ON A.REFER_ID=B.C_ID;
 SELECT A.C_ID,A.FIRST_NAME,A.LAST_NAME,
CONCAT (B.LAST_NAME," ",B.FIRST_NAME) AS REFERED_BY
FROM CUSTOMERS AS A
RIGHT JOIN CUSTOMERS AS B
ON A.REFER_ID=B.C_ID;
USE mydb;
SELECT * FROM employees;
ALTER TABLE employees
ADD REPORT int
AFTER JOB;
SELECT* FROM employees;
UPDATE employees
SET REPORT=2
WHERE employee_id=8;
SELECT * FROM employees;
SELECT A.first_name,A.last_name,A.JOB,
  CONCAT (B.first_name," ",B.last_name) AS REPORTERS
FROM employees AS A
INNER JOIN employees AS B
ON A.employee_id=B.employee_id;
 CREATE VIEW EMP_ATTENDANCE
AS
SELECT last_name,first_name
FROM employees; 
SELECT* FROM EMP_ATTENDANCE
ORDER BY last_name DESC ;
DROP VIEW EMP_ATTENDANCE;
USE KEY_S;
SELECT * FROM CUSTOMERS;
ALTER TABLE CUSTOMERS
ADD EMAIL VARCHAR(100);
UPDATE  CUSTOMERS
SET EMAIL=" ARO@GMAIL.COM"
WHERE C_ID=3;
SELECT* FROM CUSTOMERS;
CREATE VIEW C_EMAILS  AS 
SELECT EMAIL FROM CUSTOMERS;
SELECT* FROM C_EMAILS;
#INDEX- TYPE OF DATA STRUCTURE 
#THEY ARE USED TO FIND A VALUE FROM A SPECIFIC COLUMN MORE QUICKLY
#IF U HAVE A MILLIONS OF DATASET THEN SEARCH COULD BE DIFFICULT WHERE U CAN USE INDEX TO SIMPLYFY THE SEARCH 
#UPDATING TAKES LOT OF TIME WHERE SELECT TAKES LESS TIME
SHOW INDEXES FROM CUSTOMERS;
CREATE INDEX last_name_idx
ON CUSTOMERS (last_name);
SHOW INDEXES FROM CUSTOMERS;
CREATE INDEX LAST_NAME_FIRST_NAME_IDX
ON CUSTOMERS (last_name,first_name);
SHOW INDEXES FROM CUSTOMERS;
ALTER TABLE CUSTOMERS
DROP INDEX last_name_idx;
SHOW INDEXES FROM CUSTOMERS;
#SUBQUERY-QUERY WITH IN A QUERY
USE mydb;
SELECT * FROM employees;
SELECT AVG(hourly_pay) FROM employees; 
#SUBQUERYING
SELECT first_name, last_name, hourly_pay ,
       ( SELECT AVG (hourly_pay) FROM employees ) AS AVG_PAY
FROM employees;     
SELECT first_name,last_name,hourly_pay
FROM employees 
WHERE hourly_pay<=(SELECT AVG(hourly_pay) FROM employees);
USE KEY_S;
SELECT* FROM CUSTOMERS;
SELECT * FROM trans;
SELECT DISTINCT C_ID
FROM trans 
WHERE T_ID IS NOT NULL;
SELECT first_name,last_name,EMAIL 
FROM CUSTOMERS WHERE C_ID
IN
(SELECT DISTINCT C_ID
FROM trans WHERE T_ID IS NOT NULL);      
SELECT first_name, last_name 
from CUSTOMERS WHERE C_ID IN (1,2,3);
SELECT first_name,email
FROM CUSTOMERS WHERE C_ID
 IN 
(SELECT DISTINCT C_ID
FROM TRANS WHERE T_ID IS NOT  NULL);
#GROUP BY- AGGRATE ALL ROWS IN SPECIFIC COLUMN 
#USED IN AGGREGATE FUNCTION 
#SUM,AVG,MAX,MIN,COUNT
 SELECT * FROM TRANS; 
 SELECT SUM(T_V), C_ID 
 FROM TRANS
 GROUP BY C_ID;
 SELECT AVG(T_V)
 FROM TRANS 
 GROUP BY C_ID;
 SELECT COUNT(T_V),C_ID
 FROM TRANS 
 GROUP BY C_ID 
 HAVING COUNT(T_V)>1 AND C_ID IS NOT NULL;
 ##ROLLUP- GIVES GRAND TOTAL OF PARTICULAR ROW 
 ## THIS IS ALSO CALLED AS SUPER aggregate
 SELECT SUM(T_V),C_ID
 FROM TRANS 
 GROUP BY C_ID WITH ROLLUP ;
 SELECT * FROM TRANS;
 SELECT COUNT(T_ID) AS " #ORDER_S",C_ID
 FROM TRANS
 GROUP BY  C_ID WITH ROLLUP;
 USE mydb;
 SELECT SUM(hourly_pay) AS "HOURLY PAY",employee_id
 FROM employees
 GROUP BY employee_id with rollup;
 #ON DELETE SET NULL: WHEN FORGN KEY IS DELTED REPLACE WITH NULL
 #ON DELETE CASCADE:WHEN FOREIGN KEY IS DELETE THE ROW WLL BE DLETED 
 USE KEY_S;
 SELECT* FROM TRANS;
 ALTER TABLE TRANS 
 ADD  CONSTRAINT  FK_T_ID 
 FOREIGN KEY (C_ID) REFERENCES CUSTOMERS(C_ID) 
 ON DELETE SET NULL;
 SELECT * FROM TRANS;
 DELETE FROM CUSTOMERS 
 WHERE C_ID =3;
 ALTER TABLE CUSTOMERS 
 DROP INDEX C_ID;
 SELECT* FROM CUSTOMERS;
 SELECT* FROM TRANS;
 ALTER TABLE  TRANS
 DROP FOREIGN KEY FK_T_ID;
 ALTER TABLE TRANS 
 DROP FOREIGN KEY FK_TID;
 ALTER TABLE TRANS
 ADD CONSTRAINT FK_TID
 FOREIGN KEY (C_ID)REFERENCES CUSTOMERS(C_ID); 
 ALTER TABLE  TRANS
 DROP FOREIGN KEY FK_TID;
  ALTER TABLE TRANS
 ADD CONSTRAINT FK_TID
 FOREIGN KEY (C_ID)REFERENCES CUSTOMERS(C_ID) ON DELETE SET NULL;
 DELETE FROM  TRANS
 WHERE C_ID=2;
 SELECT* FROM TRANS;
 SELECT* FROM CUSTOMERS;
 UPDATE  TRANS 
 SET C_ID =1 WHERE T_ID=1005;
 SELECT* FROM TRANS;
SELECT * FROM CUSTOMERS;
INSERT INTO TRANS (t_ID,T_V,c_ID)
VALUES ("1007","235.2","1");
SELECT* FROM TRANS;
SET FOREIGN_KEY_CHECKS=0;
DELETE FROM CUSTOMERS
 WHERE 
C_ID=1;
SELECT* FROM TRANS;
SELECT* FROM CUSTOMERS;
DELETE FROM TRANS 
WHERE C_ID=1;
SELECT * FROM TRANS;
##LOOK PROPERLY FOR DELETES##




 